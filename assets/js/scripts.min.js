!(function (e, i) {
  "use strict";
  function n(t) {
    (this.callback = t), (this.ticking = !1);
  }
  function o(t, e) {
    (e = (function t(e) {
      if (arguments.length <= 0)
        throw new Error("Missing arguments in extend function");
      for (var i, n = e || {}, o = 1; o < arguments.length; o++) {
        var s = arguments[o] || {};
        for (i in s)
          n[i] = "object" == typeof n[i] ? t(n[i], s[i]) : n[i] || s[i];
      }
      return n;
    })(e, o.options)),
      (this.lastKnownScrollY = 0),
      (this.elem = t),
      (this.debouncer = new n(this.update.bind(this))),
      (this.tolerance = e.tolerance),
      (this.classes = e.classes),
      (this.offset = e.offset),
      (this.initialised = !1),
      (this.onPin = e.onPin),
      (this.onUnpin = e.onUnpin),
      (this.onTop = e.onTop),
      (this.onNotTop = e.onNotTop);
  }
  var t = {
    bind: !!function () {}.bind,
    classList: "classList" in i.documentElement,
    rAF: !!(
      e.requestAnimationFrame ||
      e.webkitRequestAnimationFrame ||
      e.mozRequestAnimationFrame
    ),
  };
  (e.requestAnimationFrame =
    e.requestAnimationFrame ||
    e.webkitRequestAnimationFrame ||
    e.mozRequestAnimationFrame),
    (n.prototype = {
      constructor: n,
      update: function () {
        this.callback && this.callback(), (this.ticking = !1);
      },
      requestTick: function () {
        this.ticking ||
          (requestAnimationFrame(
            this.rafCallback || (this.rafCallback = this.update.bind(this))
          ),
          (this.ticking = !0));
      },
      handleEvent: function () {
        this.requestTick();
      },
    }),
    (o.prototype = {
      constructor: o,
      init: function () {
        return o.cutsTheMustard
          ? (this.elem.classList.add(this.classes.initial),
            setTimeout(this.attachEvent.bind(this), 100),
            this)
          : void 0;
      },
      destroy: function () {
        var t = this.classes;
        (this.initialised = !1),
          e.removeEventListener("scroll", this.debouncer, !1),
          this.elem.classList.remove(t.unpinned, t.pinned, t.top, t.initial);
      },
      attachEvent: function () {
        this.initialised ||
          ((this.lastKnownScrollY = this.getScrollY()),
          (this.initialised = !0),
          e.addEventListener("scroll", this.debouncer, !1),
          this.debouncer.handleEvent());
      },
      unpin: function () {
        var t = this.elem.classList,
          e = this.classes;
        (!t.contains(e.pinned) && t.contains(e.unpinned)) ||
          (t.add(e.unpinned), t.remove(e.pinned), !this.onUnpin) ||
          this.onUnpin.call(this);
      },
      pin: function () {
        var t = this.elem.classList,
          e = this.classes;
        t.contains(e.unpinned) &&
          (t.remove(e.unpinned), t.add(e.pinned), this.onPin) &&
          this.onPin.call(this);
      },
      top: function () {
        var t = this.elem.classList,
          e = this.classes;
        t.contains(e.top) ||
          (t.add(e.top),
          t.remove(e.notTop),
          this.onTop && this.onTop.call(this));
      },
      notTop: function () {
        var t = this.elem.classList,
          e = this.classes;
        t.contains(e.notTop) ||
          (t.add(e.notTop),
          t.remove(e.top),
          this.onNotTop && this.onNotTop.call(this));
      },
      getScrollY: function () {
        return void 0 !== e.pageYOffset
          ? e.pageYOffset
          : (i.documentElement || i.body.parentNode || i.body).scrollTop;
      },
      getViewportHeight: function () {
        return (
          e.innerHeight || i.documentElement.clientHeight || i.body.clientHeight
        );
      },
      getDocumentHeight: function () {
        var t = i.body,
          e = i.documentElement;
        return Math.max(
          t.scrollHeight,
          e.scrollHeight,
          t.offsetHeight,
          e.offsetHeight,
          t.clientHeight,
          e.clientHeight
        );
      },
      isOutOfBounds: function (t) {
        var e = t < 0,
          t = t + this.getViewportHeight() > this.getDocumentHeight();
        return e || t;
      },
      toleranceExceeded: function (t) {
        return Math.abs(t - this.lastKnownScrollY) >= this.tolerance;
      },
      shouldUnpin: function (t, e) {
        var i = t > this.lastKnownScrollY,
          t = t >= this.offset;
        return i && t && e;
      },
      shouldPin: function (t, e) {
        var i = t < this.lastKnownScrollY,
          t = t <= this.offset;
        return (i && e) || t;
      },
      update: function () {
        var t = this.getScrollY(),
          e = this.toleranceExceeded(t);
        this.isOutOfBounds(t) ||
          (t <= this.offset ? this.top() : this.notTop(),
          this.shouldUnpin(t, e)
            ? this.unpin()
            : this.shouldPin(t, e) && this.pin(),
          (this.lastKnownScrollY = t));
      },
    }),
    (o.options = {
      tolerance: 0,
      offset: 0,
      classes: {
        pinned: "headroom--pinned",
        unpinned: "headroom--unpinned",
        top: "headroom--top",
        notTop: "headroom--not-top",
        initial: "headroom",
      },
    }),
    (o.cutsTheMustard = void 0 !== t && t.rAF && t.bind && t.classList),
    (e.Headroom = o);
})(window, document),
  (function (o) {
    "use strict";
    o.fn.fitVids = function (t) {
      var e,
        i,
        n = { customSelector: null };
      return (
        document.getElementById("fit-vids-style") ||
          ((e = document.createElement("div")),
          (i =
            document.getElementsByTagName("base")[0] ||
            document.getElementsByTagName("script")[0]),
          (e.className = "fit-vids-style"),
          (e.id = "fit-vids-style"),
          (e.style.display = "none"),
          (e.innerHTML =
            "&shy;<style>.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}</style>"),
          i.parentNode.insertBefore(e, i)),
        t && o.extend(n, t),
        this.each(function () {
          var t = [
            "iframe[src*='player.vimeo.com']",
            "iframe[src*='youtube.com']",
            "iframe[src*='youtube-nocookie.com']",
            "iframe[src*='kickstarter.com'][src*='video.html']",
            "object",
            "embed",
          ];
          n.customSelector && t.push(n.customSelector),
            o(this)
              .find(t.join(","))
              .not("object object")
              .each(function () {
                var t,
                  e,
                  i = o(this);
                ("embed" === this.tagName.toLowerCase() &&
                  i.parent("object").length) ||
                  i.parent(".fluid-width-video-wrapper").length ||
                  ((t =
                    ("object" === this.tagName.toLowerCase() ||
                    (i.attr("height") && !isNaN(parseInt(i.attr("height"), 10)))
                      ? parseInt(i.attr("height"), 10)
                      : i.height()) /
                    (isNaN(parseInt(i.attr("width"), 10))
                      ? i.width()
                      : parseInt(i.attr("width"), 10))),
                  i.attr("id") ||
                    ((e = "fitvid" + Math.floor(999999 * Math.random())),
                    i.attr("id", e)),
                  i
                    .wrap('<div class="fluid-width-video-wrapper"></div>')
                    .parent(".fluid-width-video-wrapper")
                    .css("padding-top", 100 * t + "%"),
                  i.removeAttr("height").removeAttr("width"));
              });
        })
      );
    };
  })(window.jQuery || window.Zepto),
  $(function () {
    $("article").fitVids();
  }),
  $(document).ready(function () {
    $(".showElem").mouseenter(function () {
      $(this).find("span").show();
    }),
      $(".showElem").mouseleave(function () {
        $(this).find("span").hide();
      });
    var t = document.querySelector("header"),
      t = new Headroom(t, { tolerance: 25 });
    t.init(), t.destroy();
  });
